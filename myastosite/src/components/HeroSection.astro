---
interface Props {
  title?: string;
  subtitle?: string;
  primaryButtonText?: string;
  primaryButtonLink?: string;
  secondaryButtonText?: string;
  secondaryButtonLink?: string;
}

const {
  title = "Technology that serves humanity, not profit",
  subtitle = "We envision a world where digital platforms are collectively owned by the communities that use them. Where value flows back to people, not corporations.",
  primaryButtonText = "Our Vision",
  primaryButtonLink = "#vision",
  secondaryButtonText = "Our Mission",
  secondaryButtonLink = "#mission"
} = Astro.props;

// Split title into words for animation
const titleWords = title.split(' ');
---

<section class="hero-section">
  <div class="component-container">
    <div class="hero-container">
      <h1 class="hero-title blur-animation" id="hero-title">
        {titleWords.map((word, index) => (
          <span class="hero-word" data-index={index}>
            {word}
            {index < titleWords.length - 1 && '\u00A0'}
          </span>
        ))}
      </h1>
      
      <p class="hero-subtitle">
        {subtitle}
      </p>
      
      <div class="hero-buttons">
        <a href={primaryButtonLink} class="hero-primary-button">
          {primaryButtonText}
        </a>
        <a href={secondaryButtonLink} class="hero-secondary-button">
          {secondaryButtonText}
        </a>
      </div>
    </div>
  </div>
</section>

<script>
  // Blur animation for hero title
  document.addEventListener('DOMContentLoaded', function() {
    const heroTitle = document.getElementById('hero-title');
    const words = heroTitle?.querySelectorAll('.hero-word');
    
    if (!words || words.length === 0) return;
    
    // Create intersection observer for animation trigger
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          animateWords();
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });
    
    if (heroTitle) {
      observer.observe(heroTitle);
    }
    
    function animateWords() {
      words.forEach((word, index) => {
        const delay = index * 150; // 150ms delay between words
        
        setTimeout(() => {
          word.style.opacity = '1';
          word.style.filter = 'blur(0px)';
          word.style.transform = 'translateY(0)';
        }, delay);
      });
    }
  });
</script> 