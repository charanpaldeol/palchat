---
// Interactive System Component for PalChat
---

<div class="bg-gradient-to-br from-blue-50 to-purple-50 rounded-3xl p-8 lg:p-12 shadow-xl border border-blue-100">
  <div class="text-center mb-8">
    <h2 class="text-3xl lg:text-4xl font-bold text-gray-900 mb-4">
      Interactive Digital Sovereignty System
    </h2>
    <p class="text-lg text-gray-600 max-w-3xl mx-auto">
      Experience our self-evolving system that learns from community interactions and adapts to serve humanity, not profit.
    </p>
  </div>

  <!-- System Status -->
  <div class="bg-white rounded-2xl p-6 mb-8 shadow-lg">
    <div class="flex items-center justify-between mb-4">
      <h3 class="text-xl font-semibold text-gray-900">System Status</h3>
      <div class="flex items-center gap-2">
        <div class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
        <span class="text-sm text-green-600 font-medium">Active</span>
      </div>
    </div>
    <div id="system-status" class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
      <div class="text-center p-3 bg-blue-50 rounded-lg">
        <div class="font-semibold text-blue-900">Community Size</div>
        <div id="community-size" class="text-2xl font-bold text-blue-600">-</div>
      </div>
      <div class="text-center p-3 bg-purple-50 rounded-lg">
        <div class="font-semibold text-purple-900">Mission Alignment</div>
        <div id="mission-alignment" class="text-2xl font-bold text-purple-600">-</div>
      </div>
      <div class="text-center p-3 bg-green-50 rounded-lg">
        <div class="font-semibold text-green-900">Pending Decisions</div>
        <div id="pending-decisions" class="text-2xl font-bold text-green-600">-</div>
      </div>
    </div>
  </div>

  <!-- Interactive Tabs -->
  <div class="bg-white rounded-2xl shadow-lg overflow-hidden">
    <div class="flex border-b border-gray-200">
      <button 
        class="flex-1 px-6 py-4 text-center font-medium text-gray-600 hover:text-blue-600 hover:bg-blue-50 transition-colors tab-button active"
        data-tab="chat"
      >
        <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
        </svg>
        AI Chat
      </button>
      <button 
        class="flex-1 px-6 py-4 text-center font-medium text-gray-600 hover:text-blue-600 hover:bg-blue-50 transition-colors tab-button"
        data-tab="feedback"
      >
        <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
        </svg>
        Feedback
      </button>
      <button 
        class="flex-1 px-6 py-4 text-center font-medium text-gray-600 hover:text-blue-600 hover:bg-blue-50 transition-colors tab-button"
        data-tab="vote"
      >
        <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        Community Vote
      </button>
    </div>

    <!-- Chat Tab -->
    <div id="chat-tab" class="tab-content p-6">
      <div class="mb-4">
        <h4 class="text-lg font-semibold text-gray-900 mb-2">Chat with AI Agent</h4>
        <p class="text-gray-600 text-sm">Ask questions about digital sovereignty, privacy, or community governance.</p>
      </div>
      
      <div id="chat-messages" class="space-y-4 mb-4 max-h-64 overflow-y-auto">
        <div class="flex items-start gap-3">
          <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
            <svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <div class="bg-blue-50 rounded-lg p-3 max-w-xs">
            <p class="text-sm text-blue-900">Hello! I'm here to help you understand digital sovereignty and privacy-first technology. What would you like to know?</p>
          </div>
        </div>
      </div>

      <form id="chat-form" class="flex gap-2">
        <input 
          type="text" 
          id="chat-input" 
          placeholder="Ask about digital sovereignty, privacy, or community governance..."
          class="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          maxlength="500"
        >
        <button 
          type="submit" 
          class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          Send
        </button>
      </form>
    </div>

    <!-- Feedback Tab -->
    <div id="feedback-tab" class="tab-content p-6 hidden">
      <div class="mb-4">
        <h4 class="text-lg font-semibold text-gray-900 mb-2">Submit Feedback</h4>
        <p class="text-gray-600 text-sm">Help shape the future of digital sovereignty by sharing your thoughts.</p>
      </div>
      
      <form id="feedback-form" class="space-y-4">
        <div>
          <label for="feedback-type" class="block text-sm font-medium text-gray-700 mb-2">Feedback Type</label>
          <select id="feedback-type" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            <option value="feature">Feature Request</option>
            <option value="improvement">Improvement Suggestion</option>
            <option value="concern">Privacy Concern</option>
            <option value="praise">Positive Feedback</option>
            <option value="other">Other</option>
          </select>
        </div>
        
        <div>
          <label for="feedback-content" class="block text-sm font-medium text-gray-700 mb-2">Your Feedback</label>
          <textarea 
            id="feedback-content" 
            rows="4" 
            placeholder="Share your thoughts on digital sovereignty, privacy, or community governance..."
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            maxlength="1000"
          ></textarea>
        </div>
        
        <button 
          type="submit" 
          class="w-full px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
        >
          Submit Feedback
        </button>
      </form>
    </div>

    <!-- Vote Tab -->
    <div id="vote-tab" class="tab-content p-6 hidden">
      <div class="mb-4">
        <h4 class="text-lg font-semibold text-gray-900 mb-2">Community Decisions</h4>
        <p class="text-gray-600 text-sm">Participate in community governance by voting on system decisions.</p>
      </div>
      
      <div id="vote-content" class="text-center py-8">
        <div class="text-gray-500">
          <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <p>No pending decisions at the moment.</p>
          <p class="text-sm">Check back later for community voting opportunities!</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Response Messages -->
  <div id="response-messages" class="mt-6 space-y-3"></div>
</div>

<script>
  // Backend API configuration
  const API_BASE = 'http://localhost:8000';
  const SESSION_ID = 'palchat_' + Math.random().toString(36).substr(2, 9);

  // Tab switching
  document.querySelectorAll('.tab-button').forEach(button => {
    button.addEventListener('click', () => {
      // Remove active class from all buttons and hide all content
      document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active', 'text-blue-600', 'bg-blue-50'));
      document.querySelectorAll('.tab-content').forEach(content => content.classList.add('hidden'));
      
      // Add active class to clicked button and show corresponding content
      button.classList.add('active', 'text-blue-600', 'bg-blue-50');
      const tabId = button.dataset.tab + '-tab';
      document.getElementById(tabId).classList.remove('hidden');
    });
  });

  // Load system status
  async function loadSystemStatus() {
    try {
      const response = await fetch(`${API_BASE}/api/system/status`);
      const data = await response.json();
      
      document.getElementById('community-size').textContent = data.community_size || 0;
      document.getElementById('mission-alignment').textContent = Math.round((data.mission_alignment_score || 1) * 100) + '%';
      document.getElementById('pending-decisions').textContent = data.pending_decisions || 0;
    } catch (error) {
      console.error('Failed to load system status:', error);
    }
  }

  // Show response message
  function showResponse(type, message) {
    const container = document.getElementById('response-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `p-4 rounded-lg ${
      type === 'success' ? 'bg-green-100 text-green-700 border border-green-200' : 
      type === 'error' ? 'bg-red-100 text-red-700 border border-red-200' : 
      'bg-blue-100 text-blue-700 border border-blue-200'
    }`;
    messageDiv.textContent = message;
    
    container.appendChild(messageDiv);
    
    // Remove message after 5 seconds
    setTimeout(() => {
      messageDiv.remove();
    }, 5000);
  }

  // Chat functionality
  document.getElementById('chat-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const input = document.getElementById('chat-input');
    const message = input.value.trim();
    
    if (!message) return;
    
    // Add user message to chat
    const chatMessages = document.getElementById('chat-messages');
    const userMessageDiv = document.createElement('div');
    userMessageDiv.className = 'flex items-start gap-3 justify-end';
    userMessageDiv.innerHTML = `
      <div class="bg-gray-100 rounded-lg p-3 max-w-xs">
        <p class="text-sm text-gray-900">${message}</p>
      </div>
      <div class="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0">
        <svg class="w-4 h-4 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
        </svg>
      </div>
    `;
    chatMessages.appendChild(userMessageDiv);
    
    // Clear input
    input.value = '';
    
    // Scroll to bottom
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    try {
      const response = await fetch(`${API_BASE}/api/chat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: message,
          session_id: SESSION_ID,
          context: { source: 'palchat_website', page: window.location.pathname }
        })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        // Add AI response to chat
        const aiMessageDiv = document.createElement('div');
        aiMessageDiv.className = 'flex items-start gap-3';
        aiMessageDiv.innerHTML = `
          <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
            <svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <div class="bg-blue-50 rounded-lg p-3 max-w-xs">
            <p class="text-sm text-blue-900">${data.message}</p>
          </div>
        `;
        chatMessages.appendChild(aiMessageDiv);
        
        // Scroll to bottom
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // Update system status
        loadSystemStatus();
      } else {
        showResponse('error', 'Failed to get response. Please try again.');
      }
    } catch (error) {
      console.error('Chat error:', error);
      showResponse('error', 'Connection error. Please check if the backend is running.');
    }
  });

  // Feedback functionality
  document.getElementById('feedback-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const type = document.getElementById('feedback-type').value;
    const content = document.getElementById('feedback-content').value.trim();
    
    if (!content) {
      showResponse('error', 'Please provide feedback content.');
      return;
    }
    
    try {
      const response = await fetch(`${API_BASE}/api/feedback`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          feedback_type: type,
          content: content,
          session_id: SESSION_ID
        })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        showResponse('success', 'Thank you for your feedback! It will be analyzed for community consensus.');
        document.getElementById('feedback-form').reset();
        
        // Update system status
        loadSystemStatus();
      } else {
        showResponse('error', data.error || 'Failed to submit feedback. Please try again.');
      }
    } catch (error) {
      console.error('Feedback error:', error);
      showResponse('error', 'Connection error. Please check if the backend is running.');
    }
  });

  // Load initial system status
  loadSystemStatus();
</script> 