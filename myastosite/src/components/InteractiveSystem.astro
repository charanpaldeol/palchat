---
// Floating Interactive System Component for PalChat
---

<!-- Floating Widget Container -->
<div id="floating-widget" class="fixed bottom-6 right-6 z-50 transition-all duration-300">
  <!-- Main Floating Button -->
  <div id="widget-toggle" class="w-16 h-16 bg-gradient-to-br from-blue-600 to-purple-600 rounded-full shadow-2xl cursor-pointer flex items-center justify-center hover:scale-110 transition-all duration-200 border-2 border-white">
    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
    </svg>
  </div>

  <!-- Expanded Widget Panel -->
  <div id="widget-panel" class="absolute bottom-20 right-0 w-80 bg-white rounded-2xl shadow-2xl border border-gray-200 opacity-0 pointer-events-none transition-all duration-300 transform scale-95">
    <!-- Header -->
    <div class="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4 rounded-t-2xl">
      <div class="flex items-center justify-between">
        <h3 class="text-lg font-semibold">Digital Sovereignty AI</h3>
        <button id="close-widget" class="text-white hover:text-gray-200 transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <p class="text-sm opacity-90 mt-1">Self-evolving system</p>
    </div>

    <!-- System Status -->
    <div class="p-4 border-b border-gray-100">
      <div class="flex items-center justify-between text-sm">
        <span class="text-gray-600">Status:</span>
        <div class="flex items-center gap-2">
          <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
          <span class="text-green-600 font-medium">Active</span>
        </div>
      </div>
      <div class="grid grid-cols-3 gap-2 mt-3 text-xs">
        <div class="text-center p-2 bg-blue-50 rounded">
          <div class="font-semibold text-blue-900">Community</div>
          <div id="community-size" class="text-lg font-bold text-blue-600">-</div>
        </div>
        <div class="text-center p-2 bg-purple-50 rounded">
          <div class="font-semibold text-purple-900">Alignment</div>
          <div id="mission-alignment" class="text-lg font-bold text-purple-600">-</div>
        </div>
        <div class="text-center p-2 bg-green-50 rounded">
          <div class="font-semibold text-green-900">Decisions</div>
          <div id="pending-decisions" class="text-lg font-bold text-green-600">-</div>
        </div>
      </div>
    </div>

    <!-- Quick Actions -->
    <div class="p-4 space-y-3">
      <!-- Chat Button -->
      <button id="quick-chat" class="w-full bg-blue-50 hover:bg-blue-100 text-blue-700 p-3 rounded-lg flex items-center gap-3 transition-colors">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
        </svg>
        <span class="font-medium">Ask AI Assistant</span>
      </button>

      <!-- Feedback Button -->
      <button id="quick-feedback" class="w-full bg-purple-50 hover:bg-purple-100 text-purple-700 p-3 rounded-lg flex items-center gap-3 transition-colors">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
        </svg>
        <span class="font-medium">Submit Feedback</span>
      </button>

      <!-- Vote Button -->
      <button id="quick-vote" class="w-full bg-green-50 hover:bg-green-100 text-green-700 p-3 rounded-lg flex items-center gap-3 transition-colors">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <span class="font-medium">Community Vote</span>
      </button>
    </div>

    <!-- Response Messages -->
    <div id="response-messages" class="px-4 pb-4 space-y-2"></div>
  </div>
</div>

<!-- Chat Modal -->
<div id="chat-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
  <div class="bg-white rounded-2xl w-full max-w-md max-h-[80vh] flex flex-col">
    <!-- Modal Header -->
    <div class="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4 rounded-t-2xl">
      <div class="flex items-center justify-between">
        <h3 class="text-lg font-semibold">AI Assistant</h3>
        <button id="close-chat" class="text-white hover:text-gray-200 transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Chat Messages -->
    <div id="chat-messages" class="flex-1 p-4 overflow-y-auto space-y-3 max-h-64">
      <div class="flex items-start gap-3">
        <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
          <svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <div class="bg-blue-50 rounded-lg p-3 max-w-xs">
          <p class="text-sm text-blue-900">Hello! I'm here to help you understand digital sovereignty and privacy-first technology. What would you like to know?</p>
        </div>
      </div>
    </div>

    <!-- Chat Input -->
    <div class="p-4 border-t border-gray-200">
      <form id="chat-form" class="flex gap-2">
        <input 
          type="text" 
          id="chat-input" 
          placeholder="Ask about digital sovereignty..."
          class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
          maxlength="500"
        >
        <button 
          type="submit" 
          class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
        >
          Send
        </button>
      </form>
    </div>
  </div>
</div>

<!-- Feedback Modal -->
<div id="feedback-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
  <div class="bg-white rounded-2xl w-full max-w-md max-h-[80vh] flex flex-col">
    <!-- Modal Header -->
    <div class="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-4 rounded-t-2xl">
      <div class="flex items-center justify-between">
        <h3 class="text-lg font-semibold">Submit Feedback</h3>
        <button id="close-feedback" class="text-white hover:text-gray-200 transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Feedback Form -->
    <div class="flex-1 p-4 overflow-y-auto">
      <form id="feedback-form" class="space-y-4">
        <div>
          <label for="feedback-type" class="block text-sm font-medium text-gray-700 mb-2">Feedback Type</label>
          <select id="feedback-type" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm">
            <option value="feature">Feature Request</option>
            <option value="improvement">Improvement Suggestion</option>
            <option value="concern">Privacy Concern</option>
            <option value="praise">Positive Feedback</option>
            <option value="other">Other</option>
          </select>
        </div>
        
        <div>
          <label for="feedback-content" class="block text-sm font-medium text-gray-700 mb-2">Your Feedback</label>
          <textarea 
            id="feedback-content" 
            rows="4" 
            placeholder="Share your thoughts on digital sovereignty, privacy, or community governance..."
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm"
            maxlength="1000"
          ></textarea>
        </div>
        
        <button 
          type="submit" 
          class="w-full px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors font-medium"
        >
          Submit Feedback
        </button>
      </form>
    </div>
  </div>
</div>

<script>
  // Wait for DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing ephemeral floating widget...');
    
    // Backend API configuration - uses environment variable for production
    const API_BASE = import.meta.env.PUBLIC_API_BASE || 'http://localhost:8000';
    // Session ID is now ephemeral and will be regenerated on each page load
    const SESSION_ID = 'palchat_session_' + Math.random().toString(36).substr(2, 9);

    console.log('API_BASE:', API_BASE);
    console.log('SESSION_ID (ephemeral):', SESSION_ID);

    // Widget state is now ephemeral and resets on page load
    let isWidgetOpen = false;
    let isDragging = false;
    let dragOffset = { x: 0, y: 0 };
    let widgetPosition = { x: null, y: null };
    let chatHistory = [];

    // Get DOM elements with error checking
    function getElement(id) {
      const element = document.getElementById(id);
      if (!element) {
        console.error(`Element with id '${id}' not found`);
        return null;
      }
      return element;
    }

    const widget = getElement('floating-widget');
    const widgetToggle = getElement('widget-toggle');
    const widgetPanel = getElement('widget-panel');
    const closeWidget = getElement('close-widget');
    const chatModal = getElement('chat-modal');
    const feedbackModal = getElement('feedback-modal');
    const closeChat = getElement('close-chat');
    const closeFeedback = getElement('close-feedback');
    const quickChat = getElement('quick-chat');
    const quickFeedback = getElement('quick-feedback');
    const quickVote = getElement('quick-vote');

    // Check if all required elements exist
    if (!widget || !widgetToggle || !widgetPanel) {
      console.error('Required widget elements not found');
      return;
    }

    console.log('All widget elements found, setting up event listeners...');

    // Apply saved widget position
    if (widgetPosition.x !== null && widgetPosition.y !== null) {
      widget.style.left = widgetPosition.x + 'px';
      widget.style.top = widgetPosition.y + 'px';
      widget.style.right = 'auto';
      widget.style.bottom = 'auto';
    }

    // Apply saved widget state
    if (isWidgetOpen) {
      widgetPanel.classList.remove('opacity-0', 'pointer-events-none', 'scale-95');
      widgetPanel.classList.add('opacity-100', 'pointer-events-auto', 'scale-100');
    }

    // Widget toggle functionality
    widgetToggle.addEventListener('click', function(e) {
      console.log('Widget toggle clicked');
      e.preventDefault();
      e.stopPropagation();
      
      isWidgetOpen = !isWidgetOpen;
      
      if (isWidgetOpen) {
        widgetPanel.classList.remove('opacity-0', 'pointer-events-none', 'scale-95');
        widgetPanel.classList.add('opacity-100', 'pointer-events-auto', 'scale-100');
        loadSystemStatus();
      } else {
        widgetPanel.classList.add('opacity-0', 'pointer-events-none', 'scale-95');
        widgetPanel.classList.remove('opacity-100', 'pointer-events-auto', 'scale-100');
      }
    });

    // Close widget
    if (closeWidget) {
      closeWidget.addEventListener('click', function(e) {
        console.log('Close widget clicked');
        e.preventDefault();
        e.stopPropagation();
        
        isWidgetOpen = false;
        widgetPanel.classList.add('opacity-0', 'pointer-events-none', 'scale-95');
        widgetPanel.classList.remove('opacity-100', 'pointer-events-auto', 'scale-100');
      });
    }

    // Dragging functionality
    widgetToggle.addEventListener('mousedown', function(e) {
      if (e.target === widgetToggle || widgetToggle.contains(e.target)) {
        console.log('Starting drag');
        isDragging = true;
        const rect = widget.getBoundingClientRect();
        dragOffset.x = e.clientX - rect.left;
        dragOffset.y = e.clientY - rect.top;
        widget.style.cursor = 'grabbing';
        e.preventDefault();
      }
    });

    document.addEventListener('mousemove', function(e) {
      if (isDragging) {
        const x = e.clientX - dragOffset.x;
        const y = e.clientY - dragOffset.y;
        
        // Keep widget within viewport bounds
        const maxX = window.innerWidth - widget.offsetWidth;
        const maxY = window.innerHeight - widget.offsetHeight;
        
        const finalX = Math.max(0, Math.min(x, maxX));
        const finalY = Math.max(0, Math.min(y, maxY));
        
        widget.style.left = finalX + 'px';
        widget.style.top = finalY + 'px';
        widget.style.right = 'auto';
        widget.style.bottom = 'auto';
        
        // Save position to in-memory variable
        widgetPosition = { x: finalX, y: finalY };
      }
    });

    document.addEventListener('mouseup', function() {
      if (isDragging) {
        console.log('Ending drag');
        isDragging = false;
        widget.style.cursor = 'pointer';
      }
    });

    // Modal functionality
    function showModal(modalId) {
      const modal = getElement(modalId);
      if (modal) {
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        console.log(`Modal ${modalId} shown`);
        
        // If showing chat modal, restore chat history
        if (modalId === 'chat-modal') {
          restoreChatHistory();
        }
      }
    }

    function hideModal(modalId) {
      const modal = getElement(modalId);
      if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        console.log(`Modal ${modalId} hidden`);
      }
    }

    // Restore chat history
    function restoreChatHistory() {
      const chatMessages = getElement('chat-messages');
      if (!chatMessages) return;

      // Clear existing messages except the welcome message
      const welcomeMessage = chatMessages.querySelector('.flex.items-start.gap-3');
      chatMessages.innerHTML = '';
      if (welcomeMessage) {
        chatMessages.appendChild(welcomeMessage);
      }
      
      // Add saved chat history from memory
      chatHistory.forEach(message => {
        const messageDiv = document.createElement('div');
        messageDiv.className = message.isUser ? 'flex items-start gap-3 justify-end' : 'flex items-start gap-3';
        messageDiv.innerHTML = message.html;
        chatMessages.appendChild(messageDiv);
      });
      
      // Scroll to bottom
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Save chat message to history
    function saveChatMessage(html, isUser) {
      chatHistory.push({ html, isUser });
    }

    // Quick action buttons
    if (quickChat) {
      quickChat.addEventListener('click', function(e) {
        console.log('Quick chat clicked');
        e.preventDefault();
        e.stopPropagation();
        showModal('chat-modal');
        hideModal('feedback-modal');
      });
    }

    if (quickFeedback) {
      quickFeedback.addEventListener('click', function(e) {
        console.log('Quick feedback clicked');
        e.preventDefault();
        e.stopPropagation();
        showModal('feedback-modal');
        hideModal('chat-modal');
      });
    }

    if (quickVote) {
      quickVote.addEventListener('click', function(e) {
        console.log('Quick vote clicked');
        e.preventDefault();
        e.stopPropagation();
        showResponse('info', 'No pending decisions at the moment. Check back later!');
      });
    }

    // Close modal buttons
    if (closeChat) {
      closeChat.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        hideModal('chat-modal');
      });
    }

    if (closeFeedback) {
      closeFeedback.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        hideModal('feedback-modal');
      });
    }

    // Close modals when clicking outside
    if (chatModal) {
      chatModal.addEventListener('click', function(e) {
        if (e.target === chatModal) {
          hideModal('chat-modal');
        }
      });
    }

    if (feedbackModal) {
      feedbackModal.addEventListener('click', function(e) {
        if (e.target === feedbackModal) {
          hideModal('feedback-modal');
        }
      });
    }

    // Load system status
    async function loadSystemStatus() {
      try {
        console.log('Loading system status from:', API_BASE);
        const response = await fetch(`${API_BASE}/api/system/status`);
        const data = await response.json();
        
        const communitySize = getElement('community-size');
        const missionAlignment = getElement('mission-alignment');
        const pendingDecisions = getElement('pending-decisions');
        
        if (communitySize) communitySize.textContent = data.community_size || 0;
        if (missionAlignment) missionAlignment.textContent = Math.round((data.mission_alignment_score || 1) * 100) + '%';
        if (pendingDecisions) pendingDecisions.textContent = data.pending_decisions || 0;
        
        console.log('System status loaded:', data);
      } catch (error) {
        console.error('Failed to load system status:', error);
      }
    }

    // Show response message
    function showResponse(type, message) {
      const container = getElement('response-messages');
      if (!container) return;
      
      const messageDiv = document.createElement('div');
      messageDiv.className = `p-3 rounded-lg text-sm ${
        type === 'success' ? 'bg-green-100 text-green-700 border border-green-200' : 
        type === 'error' ? 'bg-red-100 text-red-700 border border-red-200' : 
        type === 'info' ? 'bg-blue-100 text-blue-700 border border-blue-200' :
        'bg-blue-100 text-blue-700 border border-blue-200'
      }`;
      messageDiv.textContent = message;
      
      container.appendChild(messageDiv);
      
      // Remove message after 5 seconds
      setTimeout(() => {
        if (messageDiv.parentNode) {
          messageDiv.remove();
        }
      }, 5000);
    }

    // Chat functionality
    const chatForm = getElement('chat-form');
    if (chatForm) {
      chatForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const input = getElement('chat-input');
        if (!input) return;
        
        const message = input.value.trim();
        if (!message) return;
        
        console.log('Sending chat message:', message);
        
        // Add user message to chat
        const chatMessages = getElement('chat-messages');
        if (chatMessages) {
          const userMessageDiv = document.createElement('div');
          userMessageDiv.className = 'flex items-start gap-3 justify-end';
          userMessageDiv.innerHTML = `
            <div class="bg-gray-100 rounded-lg p-3 max-w-xs">
              <p class="text-sm text-gray-900">${message}</p>
            </div>
            <div class="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0">
              <svg class="w-4 h-4 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
              </svg>
            </div>
          `;
          chatMessages.appendChild(userMessageDiv);
          
          // Save user message to in-memory history
          saveChatMessage(userMessageDiv.innerHTML, true);
          
          // Clear input
          input.value = '';
          
          // Scroll to bottom
          chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        try {
          const response = await fetch(`${API_BASE}/api/chat`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              message: message,
              session_id: SESSION_ID,
              context: { source: 'palchat_website', page: window.location.pathname }
            })
          });
          
          const data = await response.json();
          
          if (response.ok) {
            // Add AI response to chat
            if (chatMessages) {
              const aiMessageDiv = document.createElement('div');
              aiMessageDiv.className = 'flex items-start gap-3';
              aiMessageDiv.innerHTML = `
                <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
                  <svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
                  </svg>
                </div>
                <div class="bg-blue-50 rounded-lg p-3 max-w-xs">
                  <p class="text-sm text-blue-900">${data.message}</p>
                </div>
              `;
              chatMessages.appendChild(aiMessageDiv);
              
              // Save AI message to in-memory history
              saveChatMessage(aiMessageDiv.innerHTML, false);
              
              // Scroll to bottom
              chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            // Update system status
            loadSystemStatus();
          } else {
            showResponse('error', 'Failed to get response. Please try again.');
          }
        } catch (error) {
          console.error('Chat error:', error);
          showResponse('error', 'Connection error. Please check if the backend is running.');
        }
      });
    }

    // Feedback functionality
    const feedbackForm = getElement('feedback-form');
    if (feedbackForm) {
      feedbackForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const typeSelect = getElement('feedback-type');
        const contentTextarea = getElement('feedback-content');
        
        if (!typeSelect || !contentTextarea) return;
        
        const type = typeSelect.value;
        const content = contentTextarea.value.trim();
        
        if (!content) {
          showResponse('error', 'Please provide feedback content.');
          return;
        }
        
        console.log('Submitting feedback:', { type, content });
        
        try {
          const response = await fetch(`${API_BASE}/api/feedback`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              feedback_type: type,
              content: content,
              session_id: SESSION_ID
            })
          });
          
          const data = await response.json();
          
          if (response.ok) {
            showResponse('success', 'Thank you for your feedback! It will be analyzed for community consensus.');
            feedbackForm.reset();
            hideModal('feedback-modal');
            
            // Update system status
            loadSystemStatus();
          } else {
            showResponse('error', data.error || 'Failed to submit feedback. Please try again.');
          }
        } catch (error) {
          console.error('Feedback error:', error);
          showResponse('error', 'Connection error. Please check if the backend is running.');
        }
      });
    }

    // Initialize
    console.log('Ephemeral Floating InteractiveSystem initialized successfully');
    loadSystemStatus();
  });
</script> 