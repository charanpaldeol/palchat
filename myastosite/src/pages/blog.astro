---
import Layout from '../layouts/Layout.astro';
import { blogPosts } from '../data/blogPosts.js';

// In a real implementation, this would come from a database
// For now, we'll use static data to demonstrate the features
const categories = [
  { id: "all", name: "All Posts", count: blogPosts.length },
  { id: "privacy", name: "Privacy", count: blogPosts.filter(p => p.category === "privacy").length },
  { id: "technology", name: "Technology", count: blogPosts.filter(p => p.category === "technology").length },
  { id: "communication", name: "Communication", count: blogPosts.filter(p => p.category === "communication").length }
];
---

<Layout title="Blog - PalChat">
  <!-- Simple Hero Section -->
  <section class="bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 py-16">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto text-center">
        <h1 class="text-4xl lg:text-5xl font-bold text-gray-900 mb-6">
          Privacy-First Blog
        </h1>
        <p class="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
          Share thoughts and ideas without the burden of accounts or data collection. 
          Every post is anonymous by design.
        </p>
      </div>
    </div>
  </section>

  <!-- Simple Blog Posts Section -->
  <section class="py-16 bg-white">
    <div class="container mx-auto px-4">
      <div class="max-w-6xl mx-auto">
        <!-- Simple Filters and Search -->
        <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-12 gap-6">
          <div class="flex flex-wrap gap-2">
            {categories.map((category) => (
              <button 
                class="px-4 py-2 rounded-lg font-medium transition-all duration-300 category-filter" 
                data-category={category.id}
                class:list={[
                  category.id === "all" ? "bg-blue-100 text-blue-800" : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                ]}
              >
                {category.name} ({category.count})
              </button>
            ))}
          </div>
          <div class="relative w-full lg:w-80">
            <input type="text" id="search-posts" placeholder="Search posts..." class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200">
            <svg class="w-5 h-5 text-gray-400 absolute left-3 top-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>

        <!-- Simple Blog Posts Grid -->
        <div id="posts-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {blogPosts.map((post) => (
            <article class="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden hover:shadow-lg transition-all duration-300 post-card" data-category={post.category}>
              <div class="p-6">
                <!-- Post Header -->
                <div class="flex items-center justify-between mb-4">
                  <div class="flex items-center gap-2">
                    <span class="text-sm text-gray-500">{post.readTime}</span>
                    <span class="text-gray-300">•</span>
                    <span class="text-sm text-gray-500">{new Date(post.date).toLocaleDateString()}</span>
                  </div>
                </div>
                
                <!-- Post Title and Content -->
                <h2 class="text-xl font-bold text-gray-900 mb-3">
                  <a href={`/blog/${post.id}`} class="hover:text-blue-600 transition-colors duration-200">
                    {post.title}
                  </a>
                </h2>
                
                <p class="text-gray-600 mb-4 leading-relaxed">
                  {post.excerpt}
                </p>
                
                <!-- Post Meta -->
                <div class="flex items-center justify-between mb-4">
                  <div class="flex items-center gap-4 text-sm text-gray-500">
                    <span class="font-medium">By {post.author}</span>
                    <span>•</span>
                    <span>{post.wordCount} words</span>
                  </div>
                </div>
                
                <!-- Tags -->
                <div class="flex flex-wrap gap-2">
                  {post.tags.map((tag) => (
                    <span class="px-3 py-1 bg-gray-100 text-gray-600 text-xs rounded-full font-medium">{tag}</span>
                  ))}
                </div>
              </div>
            </article>
          ))}
        </div>
      </div>
    </div>
  </section>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Category filtering
      document.querySelectorAll('.category-filter').forEach(btn => {
        btn.addEventListener('click', function() {
          const category = this.dataset.category;
          
          // Update active button
          document.querySelectorAll('.category-filter').forEach(b => {
            b.classList.remove('bg-blue-100', 'text-blue-800');
            b.classList.add('bg-gray-100', 'text-gray-700', 'hover:bg-gray-200');
          });
          this.classList.remove('bg-gray-100', 'text-gray-700', 'hover:bg-gray-200');
          this.classList.add('bg-blue-100', 'text-blue-800');
          
          // Filter posts
          document.querySelectorAll('.post-card').forEach(card => {
            if (category === 'all' || card.dataset.category === category) {
              card.style.display = 'block';
            } else {
              card.style.display = 'none';
            }
          });
        });
      });

      // Search functionality
      const searchInput = document.getElementById('search-posts');
      if (searchInput) {
        searchInput.addEventListener('input', function() {
          const searchTerm = this.value.toLowerCase();
          
          document.querySelectorAll('.post-card').forEach(card => {
            const titleEl = card.querySelector('h2');
            const excerptEl = card.querySelector('p');
            const tagEls = card.querySelectorAll('.text-xs');
            
            const title = titleEl ? titleEl.textContent.toLowerCase() : '';
            const excerpt = excerptEl ? excerptEl.textContent.toLowerCase() : '';
            const tags = Array.from(tagEls).map(tag => tag.textContent.toLowerCase());
            
            const matches = title.includes(searchTerm) || 
                           excerpt.includes(searchTerm) || 
                           tags.some(tag => tag.includes(searchTerm));
            
            card.style.display = matches ? 'block' : 'none';
          });
        });
      }
    });
  </script>
</Layout> 