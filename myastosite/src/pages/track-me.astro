---
import Layout from '../layouts/Layout.astro';
---

<Layout title="See How You're Tracked - Privacy Education">
  <div class="container mx-auto px-4 py-12">
    <div class="max-w-4xl mx-auto">
      <!-- Hero Section -->
      <div class="text-center mb-12">
        <h1 class="text-4xl lg:text-5xl font-bold text-gray-900 mb-4">
          See How You're Tracked
        </h1>
        <p class="text-lg text-gray-600 mb-6">
          Discover what information your browser reveals without you knowing. This is educational - no data leaves your device.
        </p>
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 max-w-2xl mx-auto">
          <div class="flex items-start gap-3">
            <svg class="w-6 h-6 text-blue-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <div class="text-left">
              <h3 class="font-semibold text-blue-900 mb-1">Privacy Notice</h3>
              <p class="text-blue-800 text-sm">This page demonstrates tracking techniques for educational purposes. All data stays on your device and is not sent to any servers.</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Tracking Sections -->
      <div class="space-y-8">
        <!-- Passive Data Section -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-8">
          <div class="flex items-center gap-3 mb-6">
            <div class="w-10 h-10 bg-gradient-to-br from-red-100 to-red-200 rounded-xl flex items-center justify-center">
              <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <h2 class="text-2xl font-bold text-gray-900">Passive Data Collection</h2>
          </div>
          <p class="text-gray-600 mb-6">Information your browser automatically reveals to websites:</p>
          
          <div id="passive-data" class="grid md:grid-cols-2 gap-4">
            <!-- Data will be populated by JavaScript -->
          </div>
        </div>

        <!-- Storage Tracking Section -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-8">
          <div class="flex items-center gap-3 mb-6">
            <div class="w-10 h-10 bg-gradient-to-br from-yellow-100 to-yellow-200 rounded-xl flex items-center justify-center">
              <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4"></path>
              </svg>
            </div>
            <h2 class="text-2xl font-bold text-gray-900">Storage Tracking</h2>
          </div>
          <p class="text-gray-600 mb-6">How websites store data on your device to track you across visits:</p>
          
          <div id="storage-data" class="grid md:grid-cols-2 gap-4">
            <!-- Data will be populated by JavaScript -->
          </div>
        </div>

        <!-- Fingerprinting Section -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-8">
          <div class="flex items-center gap-3 mb-6">
            <div class="w-10 h-10 bg-gradient-to-br from-purple-100 to-purple-200 rounded-xl flex items-center justify-center">
              <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
              </svg>
            </div>
            <h2 class="text-2xl font-bold text-gray-900">Browser Fingerprinting</h2>
          </div>
          <p class="text-gray-600 mb-6">Unique characteristics that can identify your browser:</p>
          
          <div id="fingerprint-data" class="grid md:grid-cols-2 gap-4">
            <!-- Data will be populated by JavaScript -->
          </div>
        </div>

        <!-- Behavioral Tracking Section -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-8">
          <div class="flex items-center gap-3 mb-6">
            <div class="w-10 h-10 bg-gradient-to-br from-green-100 to-green-200 rounded-xl flex items-center justify-center">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
            </div>
            <h2 class="text-2xl font-bold text-gray-900">Behavioral Tracking</h2>
          </div>
          <p class="text-gray-600 mb-6">Your interactions and behavior patterns being monitored:</p>
          
          <div id="behavior-data" class="grid md:grid-cols-2 gap-4">
            <!-- Data will be populated by JavaScript -->
          </div>
        </div>

        <!-- Interest Profile Section -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-8">
          <div class="flex items-center gap-3 mb-6">
            <div class="w-10 h-10 bg-gradient-to-br from-indigo-100 to-indigo-200 rounded-xl flex items-center justify-center">
              <svg class="w-6 h-6 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
            </div>
            <h2 class="text-2xl font-bold text-gray-900">Simulated Interest Profile</h2>
          </div>
          <p class="text-gray-600 mb-6">Based on your behavior, here's what advertisers might think about you:</p>
          
          <div id="interest-profile" class="bg-gray-50 rounded-lg p-6">
            <!-- Profile will be populated by JavaScript -->
          </div>
        </div>

        <!-- Impact Reveal Section -->
        <div class="bg-gradient-to-r from-red-50 to-orange-50 border border-red-200 rounded-2xl p-8">
          <div class="text-center">
            <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
            <h2 class="text-2xl font-bold text-red-900 mb-4">The Reality Check</h2>
            <p class="text-red-800 text-lg mb-4">
              This is what most websites send to third-party trackers in under 1 second of your visit.
            </p>
            <p class="text-red-700">
              Your browser reveals this information automatically, often without your knowledge or consent.
            </p>
          </div>
        </div>

        <!-- Privacy Tips Section -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">How to Protect Your Privacy</h2>
          <div class="grid md:grid-cols-2 gap-6">
            <div class="space-y-4">
              <div class="flex items-start gap-3">
                <div class="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                  <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="font-semibold text-gray-900">Use Privacy Extensions</h3>
                  <p class="text-gray-600 text-sm">Ad blockers, tracker blockers, and privacy-focused browsers</p>
                </div>
              </div>
              <div class="flex items-start gap-3">
                <div class="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                  <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="font-semibold text-gray-900">Clear Storage Regularly</h3>
                  <p class="text-gray-600 text-sm">Delete cookies, localStorage, and sessionStorage</p>
                </div>
              </div>
            </div>
            <div class="space-y-4">
              <div class="flex items-start gap-3">
                <div class="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                  <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="font-semibold text-gray-900">Use VPN Services</h3>
                  <p class="text-gray-600 text-sm">Hide your IP address and location</p>
                </div>
              </div>
              <div class="flex items-start gap-3">
                <div class="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                  <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="font-semibold text-gray-900">Be Mindful of Permissions</h3>
                  <p class="text-gray-600 text-sm">Review and limit what websites can access</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Privacy-focused tracking demonstration
    class PrivacyTracker {
      constructor() {
        this.visitorId = this.generateVisitorId();
        this.startTime = Date.now();
        this.scrollDepth = 0;
        this.clickCount = 0;
        this.sectionTime = {};
        this.currentSection = '';
        
        this.init();
      }

      generateVisitorId() {
        return 'visitor_' + Math.random().toString(36).substr(2, 9);
      }

      async init() {
        this.setupStorage();
        this.collectPassiveData();
        this.setupBehavioralTracking();
        this.updateDisplay();
        
        // Update every 2 seconds
        setInterval(() => this.updateDisplay(), 2000);
      }

      setupStorage() {
        // Simulate localStorage tracking
        if (typeof localStorage !== 'undefined') {
          localStorage.setItem('visitorId', this.visitorId);
          localStorage.setItem('visitCount', (parseInt(localStorage.getItem('visitCount') || '0') + 1).toString());
          localStorage.setItem('lastVisit', new Date().toISOString());
        }

        // Simulate sessionStorage tracking
        if (typeof sessionStorage !== 'undefined') {
          sessionStorage.setItem('sessionStart', new Date().toISOString());
          sessionStorage.setItem('pageUrl', window.location.href);
        }

        // Simulate cookie tracking
        document.cookie = `visitorId=${this.visitorId}; max-age=31536000; path=/`;
        document.cookie = `visitCount=${localStorage.getItem('visitCount')}; max-age=31536000; path=/`;
      }

      async collectPassiveData() {
        this.passiveData = {
          userAgent: navigator.userAgent,
          language: navigator.language,
          languages: navigator.languages?.join(', '),
          platform: navigator.platform,
          cookieEnabled: navigator.cookieEnabled,
          onLine: navigator.onLine,
          screenWidth: screen.width,
          screenHeight: screen.height,
          colorDepth: screen.colorDepth,
          pixelDepth: screen.pixelDepth,
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
          referrer: document.referrer || 'Direct visit',
          url: window.location.href,
          timestamp: new Date().toISOString()
        };

        // Get IP and location (educational purposes only)
        try {
          const response = await fetch('https://ipapi.co/json/');
          const data = await response.json();
          this.passiveData.ip = data.ip;
          this.passiveData.location = `${data.city}, ${data.country_name}`;
          this.passiveData.isp = data.org;
        } catch (error) {
          this.passiveData.ip = 'Unable to fetch';
          this.passiveData.location = 'Unable to fetch';
          this.passiveData.isp = 'Unable to fetch';
        }
      }

      setupBehavioralTracking() {
        // Track scroll depth
        window.addEventListener('scroll', () => {
          const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
          this.scrollDepth = Math.max(this.scrollDepth, scrollPercent);
        });

        // Track clicks
        document.addEventListener('click', (e) => {
          this.clickCount++;
          const target = e.target.textContent?.substring(0, 20) || 'Unknown element';
          this.sectionTime[this.currentSection] = (this.sectionTime[this.currentSection] || 0) + 1;
        });

        // Track section visibility
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              this.currentSection = entry.target.id || 'Unknown section';
            }
          });
        });

        document.querySelectorAll('div[id]').forEach(div => observer.observe(div));
      }

      generateFingerprint() {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        ctx.textBaseline = 'top';
        ctx.font = '14px Arial';
        ctx.fillText('Browser fingerprinting test', 2, 2);
        
        const fingerprint = {
          canvas: canvas.toDataURL().substring(0, 50) + '...',
          webglVendor: this.getWebGLVendor(),
          webglRenderer: this.getWebGLRenderer(),
          fonts: this.getAvailableFonts(),
          plugins: this.getPlugins(),
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
          screenRes: `${screen.width}x${screen.height}`,
          colorDepth: screen.colorDepth,
          pixelRatio: window.devicePixelRatio
        };

        // Generate uniqueness estimate
        const hash = this.simpleHash(JSON.stringify(fingerprint));
        fingerprint.uniqueness = `${(hash % 1000000) / 10000}% unique`;

        return fingerprint;
      }

      getWebGLVendor() {
        try {
          const canvas = document.createElement('canvas');
          const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
          return gl ? gl.getParameter(gl.VENDOR) : 'Not available';
        } catch (e) {
          return 'Not available';
        }
      }

      getWebGLRenderer() {
        try {
          const canvas = document.createElement('canvas');
          const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
          return gl ? gl.getParameter(gl.RENDERER) : 'Not available';
        } catch (e) {
          return 'Not available';
        }
      }

      getAvailableFonts() {
        const fonts = ['Arial', 'Helvetica', 'Times New Roman', 'Courier New', 'Verdana', 'Georgia'];
        return fonts.filter(font => document.fonts.check(`12px ${font}`)).join(', ');
      }

      getPlugins() {
        if (navigator.plugins) {
          return Array.from(navigator.plugins).map(p => p.name).join(', ');
        }
        return 'Not available';
      }

      simpleHash(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
          const char = str.charCodeAt(i);
          hash = ((hash << 5) - hash) + char;
          hash = hash & hash; // Convert to 32-bit integer
        }
        return Math.abs(hash);
      }

      generateInterestProfile() {
        const interests = [];
        
        // Simulate interest based on behavior
        if (this.scrollDepth > 50) interests.push('Engaged Reader');
        if (this.clickCount > 5) interests.push('Active User');
        if (this.passiveData.screenWidth > 1200) interests.push('Desktop User');
        if (this.passiveData.language.includes('en')) interests.push('English Speaker');
        if (this.passiveData.timezone.includes('America')) interests.push('North American');
        if (this.passiveData.timezone.includes('Europe')) interests.push('European');
        if (this.passiveData.timezone.includes('Asia')) interests.push('Asian');
        
        return interests.length > 0 ? interests : ['General Internet User'];
      }

      getUsageExample(dataType, value) {
        const examples = {
          // Passive Data Examples
          'ip': 'Used for geo-targeting ads, price discrimination, and content blocking based on location',
          'location': 'Shows local ads, adjusts prices (flights/hotels), and restricts content by region',
          'userAgent': 'Identifies device type for targeted ads (mobile vs desktop), browser-specific tracking',
          'language': 'Serves ads in your language, cultural targeting, and localized content manipulation',
          'timezone': 'Time-based ad targeting, showing ads at optimal hours, and behavioral analysis',
          'screenWidth': 'Device targeting (mobile vs desktop), responsive ad placement, and user experience manipulation',
          'referrer': 'Tracks where you came from, builds browsing history, and creates user journey profiles',
          'platform': 'OS-specific targeting (iOS vs Android), platform-based price discrimination',
          'cookieEnabled': 'Determines tracking capabilities, serves different experiences based on privacy settings',
          'onLine': 'Online/offline behavior tracking, connectivity-based ad targeting',
          'colorDepth': 'Device capability assessment, high-end vs budget user targeting',
          'pixelDepth': 'Display quality targeting, premium user identification',
          'url': 'Page-specific tracking, content interest analysis, and cross-site behavior correlation',
          'timestamp': 'Time-based targeting, behavioral pattern analysis, and real-time ad serving',
          'languages': 'Multi-language user identification, cultural background targeting',
          'screenHeight': 'Device form factor targeting, mobile vs tablet vs desktop optimization',
          'isp': 'Internet service provider targeting, bandwidth-based content delivery, and ISP-specific ads',

          // Storage Examples
          'visitorId': 'Cross-site tracking, persistent user identification, and long-term behavior analysis',
          'visitCount': 'User engagement scoring, retargeting frequency, and loyalty program targeting',
          'lastVisit': 'Recency targeting, re-engagement campaigns, and abandoned cart recovery',
          'sessionStart': 'Session-based targeting, real-time behavior analysis, and immediate ad serving',
          'pageUrl': 'Content interest tracking, page-specific retargeting, and user journey mapping',
          'timeOnPage': 'Engagement scoring, content effectiveness measurement, and user attention targeting',

          // Fingerprint Examples
          'canvas': 'Unique browser identification, cross-site tracking even with cookies disabled',
          'webglVendor': 'Hardware-based targeting, gaming vs professional user identification',
          'webglRenderer': 'GPU capability assessment, high-performance user targeting',
          'fonts': 'System configuration fingerprinting, unique device identification',
          'plugins': 'Browser capability assessment, security vulnerability targeting',
          'uniqueness': 'Cross-site user identification, persistent tracking without consent',
          'screenRes': 'Device type identification, display quality targeting, and user experience manipulation',
          'pixelRatio': 'High-DPI display targeting, premium device user identification',

          // Behavioral Examples
          'scrollDepth': 'Content engagement scoring, attention span analysis, and ad placement optimization',
          'clickCount': 'User activity level assessment, interactive vs passive user targeting',
          'currentSection': 'Content interest tracking, real-time behavior analysis, and dynamic ad serving',
          'mousePosition': 'Attention tracking, heat map generation, and optimal ad placement',
          'pageInteractions': 'User engagement scoring, content effectiveness measurement, and behavioral profiling'
        };

        return examples[dataType.toLowerCase()] || 'Used for user profiling and targeted advertising';
      }

      createDataCard(title, value, description = '') {
        const usageExample = this.getUsageExample(title, value);
        return `
          <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
            <h3 class="font-semibold text-gray-900 text-sm mb-1">${title}</h3>
            <p class="text-gray-700 text-sm font-mono break-all mb-2">${value}</p>
            <div class="bg-red-50 border-l-4 border-red-400 p-3">
              <p class="text-red-800 text-xs font-medium mb-1">🎯 How it's used:</p>
              <p class="text-red-700 text-xs">${usageExample}</p>
            </div>
            ${description ? `<p class="text-gray-500 text-xs mt-2">${description}</p>` : ''}
          </div>
        `;
      }

      updateDisplay() {
        // Update passive data
        const passiveContainer = document.getElementById('passive-data');
        if (passiveContainer) {
          passiveContainer.innerHTML = Object.entries(this.passiveData).map(([key, value]) => 
            this.createDataCard(key.charAt(0).toUpperCase() + key.slice(1), value)
          ).join('');
        }

        // Update storage data
        const storageContainer = document.getElementById('storage-data');
        if (storageContainer) {
          const storageData = {
            'Visitor ID': this.visitorId,
            'Visit Count': localStorage.getItem('visitCount') || '1',
            'Last Visit': new Date(localStorage.getItem('lastVisit') || Date.now()).toLocaleString(),
            'Session Start': new Date(sessionStorage.getItem('sessionStart') || Date.now()).toLocaleString(),
            'Page URL': sessionStorage.getItem('pageUrl') || window.location.href,
            'Time on Page': Math.round((Date.now() - this.startTime) / 1000) + ' seconds'
          };
          
          storageContainer.innerHTML = Object.entries(storageData).map(([key, value]) => 
            this.createDataCard(key, value)
          ).join('');
        }

        // Update fingerprint data
        const fingerprintContainer = document.getElementById('fingerprint-data');
        if (fingerprintContainer) {
          const fingerprint = this.generateFingerprint();
          fingerprintContainer.innerHTML = Object.entries(fingerprint).map(([key, value]) => 
            this.createDataCard(key.charAt(0).toUpperCase() + key.slice(1), value)
          ).join('');
        }

        // Update behavioral data
        const behaviorContainer = document.getElementById('behavior-data');
        if (behaviorContainer) {
          const behaviorData = {
            'Scroll Depth': this.scrollDepth + '%',
            'Click Count': this.clickCount,
            'Current Section': this.currentSection || 'Unknown',
            'Time on Page': Math.round((Date.now() - this.startTime) / 1000) + ' seconds',
            'Mouse Position': 'Tracked (simulated)',
            'Page Interactions': Object.keys(this.sectionTime).length
          };
          
          behaviorContainer.innerHTML = Object.entries(behaviorData).map(([key, value]) => 
            this.createDataCard(key, value)
          ).join('');
        }

        // Update interest profile
        const profileContainer = document.getElementById('interest-profile');
        if (profileContainer) {
          const interests = this.generateInterestProfile();
          profileContainer.innerHTML = `
            <div class="space-y-3">
              <h3 class="font-semibold text-gray-900">Inferred Interests:</h3>
              <div class="flex flex-wrap gap-2">
                ${interests.map(interest => 
                  `<span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">${interest}</span>`
                ).join('')}
              </div>
              <div class="bg-red-50 border-l-4 border-red-400 p-3 mt-4">
                <p class="text-red-800 text-xs font-medium mb-1">🎯 How this profile is used:</p>
                <p class="text-red-700 text-xs">
                  Advertisers use this profile to serve personalized ads, manipulate prices, and create targeted content. 
                  Your interests determine which products you see, how much you pay, and what content is shown to you.
                </p>
              </div>
              <p class="text-gray-600 text-sm mt-4">
                This profile is generated based on your browsing behavior and device characteristics. 
                Real advertisers use similar data to target ads and manipulate user behavior.
              </p>
            </div>
          `;
        }
      }
    }

    // Initialize the tracker when page loads
    document.addEventListener('DOMContentLoaded', () => {
      new PrivacyTracker();
    });
  </script>
</Layout> 